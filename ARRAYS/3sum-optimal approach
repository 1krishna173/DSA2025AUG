Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        int i=0,j=i+1,k=n-1;
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        while(i<n-2){
            if(i>0 && nums[i]==nums[i-1]){i++;continue;}//skips duplicate
            j=i+1,k=n-1;
            while(j<k){
            int sum=nums[i]+nums[j]+nums[k];
            if(sum<0){
                j++;
            }
            else if(sum>0){
                k--;
            }
            else if(sum==0){
                ans.push_back({nums[i],nums[j],nums[k]});
                int prevj=nums[j],prevk=nums[k];
                while(j<n && prevj==nums[j])j++;
                while(k>i && prevk==nums[k])k--;
            }
            }
            i++;
        }
        return ans;
    }
};
