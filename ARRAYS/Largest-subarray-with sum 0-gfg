Given an array arr[] containing both positive and negative integers, the task is to find the length of the longest subarray with a sum equals to 0.

Note: A subarray is a contiguous part of an array, formed by selecting one or more consecutive elements while maintaining their original order.

Input: arr[] = [15, -2, 2, -8, 1, 7, 10, 23]
Output: 5
Explanation: The longest subarray with sum equals to 0 is [-2, 2, -8, 1, 7].
Input: arr[] = [2, 10, 4]
Output: 0
Explanation: There is no subarray with a sum of 0.
Input: arr[] = [1, 0, -4, 3, 1, 0]
Output: 5
Explanation: The longest subarray with sum equals to 0 is [0, -4, 3, 1, 0]

class Solution {
  public:
    int maxLength(vector<int>& arr) {
        unordered_map<int,int> mpp;
        int sum=0;
        int maxlen=0;
        mpp[0]=0;
        for(int i=0;i<arr.size();i++){
            sum+=arr[i];
            if(mpp.count(sum)){
                maxlen=max(maxlen,i-mpp[sum]+1);
            }
            if(!mpp.count(sum))mpp[sum]=i+1;
        }
        return maxlen;
    }
};
