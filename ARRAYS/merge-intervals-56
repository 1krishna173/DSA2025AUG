Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        int n=intervals.size();
        vector<vector<int>> ans;
        // for(int i=0;i<n;i++){//Brute but tc-O(2*n)+O(nlogn)
        //     int start=intervals[i][0];
        //     int end=intervals[i][1];
        //     //  if(!ans.empty() && ans.back()[1]>=end)continue;
        //     int j=i+1;
        //         while( j<n && end>=intervals[j][0]){
        //             end=max(end,intervals[j][1]);
        //             j++;
        //         }
                
        //      ans.push_back({start,end});
        //      i=j-1;
        // }
        ans.push_back({intervals[0][0],intervals[0][1]});
        for(int i=1;i<n;i++){
            if(ans.back()[1]>=intervals[i][0]){
                ans.back()[1]=max(ans.back()[1],intervals[i][1]);
            }
            else{
                ans.push_back({intervals[i][0],intervals[i][1]});
            }
        }
        return ans;
    }
};
