493. Reverse Pairs

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 
Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1

class Solution {
public:
    long long int count=0;
    void merge(vector<int> &arr,int start,int mid,int end){
        int i=start,j=mid+1;
        vector<int> temp;
        
        while(i<=mid && j<=end){
            if(arr[i]<=arr[j]){
                
                temp.push_back(arr[i]);
                i++;
            }
            else{
                
                temp.push_back(arr[j]);
                j++;
            }
        }
        while(i<=mid){
            temp.push_back(arr[i]);
             i++;
        }
        while(j<=end){
            temp.push_back(arr[j]);
             j++;
        }
        for(int i=0;i<temp.size();i++){
            arr[i+start]=temp[i];
        }
        
    }
    void countpairs(vector<int> &arr,int start,int mid,int end){
        int j=mid+1;
        for(int i=start;i<=mid;i++){
            while(j<=end && (long long)arr[i]>arr[j]*2LL){
                j++;
            }
            count+=(j-(mid+1));
        }
    }
    void  mergesort(vector<int> &arr,int start,int end){
        long long int cnt=0;
        if(start<end){
            int mid=start+(end-start)/2;
            mergesort(arr,start,mid);
            mergesort(arr,mid+1,end);
            countpairs(arr,start,mid,end);
            merge(arr,start,mid,end);
        }
       
    }
    int reversePairs(vector<int>& nums) {
         mergesort(nums,0,nums.size()-1);
         return count;
    }
};
