You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

//brute will be usind and 2d vector space 
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>> ans(n,vector<int> (n,0));
        int last=n-1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                ans[j][last]=matrix[i][j];
            }
            last--;
        }
        matrix=ans;
    }
};
TC-O(N*2)
SC-O(N*2)
//NOT TO USE ADDITIONAL VECTOR

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
       
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
               swap(matrix[i][j],matrix[j][i]);
            }
        }
        
           for (int i=0; i<n;i++) {
        reverse(matrix[i].begin(), matrix[i].end());
            }
    }
};
TC-2*O(N*2)
SC-O(1)
