You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 class Solution {
public:
     bool checkbo(vector<int>& bloomDay, int m, int k,int mid)  {
        int countm=0,count=0;
        int n=bloomDay.size();
        int i=0;
        while(i<n){
            if(count==k){
                countm++;
                count=0;
            }
            if(bloomDay[i]<=mid){
                count++;
            }
            else{
                count=0;
            }
            i++;
        }
        if(count==k){
                countm++;
            }
        return countm>=m;
     }
    int minDays(vector<int>& bloomDay, int m, int k) {
        int maxe=INT_MIN;
        int n=bloomDay.size();
        for(int i=0;i<n;i++){
            maxe=max(maxe,bloomDay[i]);
        }
        int start=1,end=maxe;
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(checkbo(bloomDay,m,k,mid)){
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
};
