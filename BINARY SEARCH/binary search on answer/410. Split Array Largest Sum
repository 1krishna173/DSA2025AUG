Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.

class Solution {
public:
    int countsubarray(vector<int>& nums, int k, int mid) {
        int sum = 0, subc = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum > mid) {
                sum = nums[i];
                subc++;
            }
        }
        return ++subc;
    }
    int splitArray(vector<int>& nums, int k) {
        int n = nums.size();
        int maxe = INT_MIN, sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            maxe = max(maxe, nums[i]);
            sum += nums[i];
        }
        int start = maxe, end = sum;
        int ans = -1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (countsubarray(nums, k, mid) > k)
                start = mid + 1;
            else {
                ans = mid;
                end = mid - 1;
            }
        }
        return ans;
    }
};
