You are given an array with unique elements of stalls[], which denote the positions of stalls. You are also given an integer k which denotes the number of aggressive cows. The task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples:

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows in this case is 3, which is the largest among all possible ways.

Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows in this case is 4, which is the largest among all possible ways.

class Solution {
  public:
  bool canweplacecows(vector<int> &stalls, int k,int distance){
      int cow=1,last=stalls[0];
      for(int i=1;i<stalls.size();i++){
          if(stalls[i]-last>=distance){
              cow++;
              last=stalls[i];
          }
          if(cow>=k)return true;
      }
      return cow>=k;
  }
    int aggressiveCows(vector<int> &stalls, int k) {
        // code here
        sort(stalls.begin(),stalls.end());
        int n=stalls.size();
        // if(k<n)return -1;
        int maxe=INT_MIN,mine=INT_MAX;
        for(int i=0;i<n;i++){
            maxe=max(maxe,stalls[i]);
            mine=min(mine,stalls[i]);
        }
        int start=1,end=maxe-mine;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(canweplacecows(stalls,k,mid)){
                start=mid+1;
            }
            else end=mid-1;
        }
        return end;
        
        
    }
};
