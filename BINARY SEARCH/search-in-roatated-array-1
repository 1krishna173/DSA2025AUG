There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly left rotated at an unknown index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be left rotated by 3 indices and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1

class Solution {
public:
    int minIndex(vector<int>& nums){
        int st=0,end=nums.size()-1;
        while(st<end){
            int mid=st+(end-st)/2;
            if(nums[mid]>=nums[end]){
                st=mid+1;
            }
            else{
                end=mid;
            }
        }
        return st;
    }
    int BS(vector<int>& a, int target,int st,int end){
        while(st<=end){
            int mid=st+(end-st)/2;
            if(a[mid]==target){return mid;}
            if(a[mid]>target){
                end=mid-1;
            }
            else{   
                st=mid+1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int index=minIndex(nums);
        if(index==0){
            return BS(nums,target,0,nums.size()-1);
        }
        int a=BS(nums,target,0,index-1);
        int b=BS(nums,target,index,nums.size()-1);
        int check=max(a,b);
        if(check==-1){return -1;}
        return check;
    }
};
