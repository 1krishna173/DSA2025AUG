Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

BRUTE
class Solution {
public:
    string reverseWords(string s) {
        stack<string> st;
        string temp="";
        for(int i=0;i<s.size();i++){
            if(s[i]==' '){
                if(temp.size()!=0)st.push(temp);
                temp="";
                continue;
            }
            else temp+=s[i];
        }
        if(temp.size()!=0) {st.push(temp);}
        string ans;
        while(!st.empty()){
            ans+=st.top();
            ans+=' ';
            st.pop();
        }
        
        ans.pop_back();
        return ans;
    }
};
OPTIMAL
class Solution {
public:
    string reverseWords(string s) {
        int n = s.size();
        int left = 0, right = n - 1;

        // 1. Remove leading spaces
        while (left < n && s[left] == ' ') left++;
        // 2. Remove trailing spaces
        while (right >= 0 && s[right] == ' ') right--;

        string ans = "";
        string temp = "";

        while (left <= right) {
            char ch = s[left];
            if (ch != ' ') {
                temp += ch;  // build word
            } else if (ch == ' ') {
                if (!temp.empty()) { // only process if word is formed
                    if (!ans.empty()) ans = temp + " " + ans;
                    else ans = temp;
                    temp.clear();
                }
            }
            left++;
        }

        // Add the last word
        if (!temp.empty()) {
            if (!ans.empty()) ans = temp + " " + ans;
            else ans = temp;
        }

        return ans;
    }
};
